from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
#dataset
texts = [
    "I love programming.",
    "Python is amazing.",
    "I enjoy machine learning.",
    "The weather is nice today.",
    "I like algo.",
    "Machine learning is fascinating.",
    "Natural Language Processing is a part of AI.",
    "I had pizza for dinner.",
    "Deep learning is changing the world.",
    "AI will revolutionize industries.",
    "I went to the beach yesterday.",
    "JavaScript powers the web.",
    "Cloud computing makes scaling easy.",
    "My dog is very playful.",
    "We watched a movie last night.",
    "GitHub is great for collaboration.",
    "I prefer TensorFlow over PyTorch.",
    "The sky looks beautiful today.",
    "React and Node.js are popular frameworks.",
    "She likes gardening in the evening.",
    "Cybersecurity is crucial in the modern world.",
    "We played football in the park.",
    "Learning SQL helps in data analysis.",
    "He enjoys hiking on weekends.",
    "Data Science combines stats and coding.",
    "Reading books is my hobby.",
    "Docker simplifies app deployment.",
    "They are baking cookies right now.",
    "I just built my first website.",
    "My cat sleeps all day.",
]

labels = [
    "tech", "tech", "tech", "non-tech", "tech", "tech", "tech",
    "non-tech", "tech", "tech", "non-tech", "tech", "tech", "non-tech",
    "non-tech", "tech", "tech", "non-tech", "tech", "non-tech",
    "tech", "non-tech", "tech", "non-tech", "tech", "non-tech",
    "tech", "non-tech", "tech", "non-tech"
]
vectorizer = CountVectorizer()
x = vectorizer.fit_transform(texts)
#split data in train and test split
x_train , x_test,y_train, y_test = train_test_split(x,labels,test_size=0.2,train_size=0.8,random_state=42)
# train model on naive bayes algorithm
model = MultinomialNB()
model.fit(x_train,y_train)
#predicting model on testing data
y_pred = model.predict(x_test)
#to see the actual results and the results generated by the model
print(y_pred)
print(y_test)
# accuracy score
accuracy = accuracy_score(y_pred,y_test)
print("Accuracy",accuracy*100)
#cross valuation score
from sklearn.model_selection import cross_val_score
scores = cross_val_score(model, x, labels, cv=5)
print("CV Accuracy:", scores.mean()*100)
